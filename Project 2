-- Bluebikes Data
-- See number of trips per month per year over 4 yearly data tables
WITH 
full_data_bb (bike_id, start_time, end_time, start_station_id, end_station_id, user_type, user_birth_year, user_gender) AS
(SELECT * 
FROM bluebikes_2016
UNION ALL
SELECT *
FROM bluebikes_2017
UNION ALL
SELECT *
FROM bluebikes_2018
UNION ALL
SELECT *
FROM bluebikes_2019)

SELECT COUNT(*), DATE_PART('month', start_time) AS month_sep, DATE_PART('year', start_time) AS year_sep
FROM full_data_bb
GROUP BY month_sep, year_sep
ORDER BY year_sep, month_sep

-- Compare to just one year to double check number of trips (note: id's are repeated on multiple trips, so distinct counts will give lower number of trips)
SELECT COUNT(bike_id), DATE_PART('month', start_time) AS month_sep, DATE_PART('year', start_time) AS year_sep
FROM bluebikes_2016
GROUP BY month_sep, year_sep
ORDER BY year_sep, month_sep

-- Divvy Data
WITH
full_data_div (bike_id, start_time, end_time, start_station_id, end_station_id, user_type, user_birth_year, user_gender)
SELECT *
FROM divvybikes_2016
UNION ALL
SELECT *
FROM divvybikes_2017
UNION ALL
SELECT *
FROM divvybikes_2018
UNION ALL
SELECT *
FROM divvybikes_2019
-- Gender defintion is 0 = undefined, 1 = Male, 2 = Female (from bluebikes website)

SELECT *
FROM divvy_stations

--add start and end station locations to bluebikes_2019
SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.end_station_id, bb.user_type, bb.user_birth_year, bb.user_gender, 
 		bb_s.latitude, bb_s.longtitude,
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb
LEFT JOIN bluebikes_stations AS bb_s
		ON bb.start_station_id = bb_s.id
LEFT JOIN bluebikes_stations AS bb_e
		ON bb.end_station_id = bb_e.id
    
-- or using a CTE below
WITH 
bb_2019 (bike_id, start_time, end_time, start_station_id, end_station_id, user_type, user_birth_year, user_gender, s_lat, s_long, e_lat, e_long) AS 
(SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.end_station_id, bb.user_type, bb.user_birth_year, bb.user_gender, 
 		bb_s.latitude, bb_s.longtitude,
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb
LEFT JOIN bluebikes_stations AS bb_s
		ON bb.start_station_id = bb_s.id
LEFT JOIN bluebikes_stations AS bb_e
		ON bb.end_station_id = bb_e.id)

SELECT * FROM bb_2019

WITH 
bb_2019 (bike_id, start_time, end_time, start_station_id, end_station_id, user_type, user_birth_year, user_gender, s_lat, s_long, e_lat, e_long) AS 
(SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.end_station_id, bb.user_type, bb.user_birth_year, bb.user_gender, 
 		bb_s.latitude, bb_s.longtitude,
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb
LEFT JOIN bluebikes_stations AS bb_s
		ON bb.start_station_id = bb_s.id
LEFT JOIN bluebikes_stations AS bb_e
		ON bb.end_station_id = bb_e.id)

SELECT calculate_distance(a.s_lat, a.s_long,
						 b.e_lat, b.e_long,
						 'K') AS dist				
FROM bb_2019 a,
	bb_2019 b
-- attempting to calculate distance between start and end query

WITH 
bb_2019 (bike_id, start_time, end_time, start_station_id, end_station_id, user_type, user_birth_year, user_gender, s_lat, s_long, e_lat, e_long) AS 
(SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.end_station_id, bb.user_type, bb.user_birth_year, bb.user_gender, 
 		bb_s.latitude, bb_s.longtitude,
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb
LEFT JOIN bluebikes_stations AS bb_s
		ON bb.start_station_id = bb_s.id
LEFT JOIN bluebikes_stations AS bb_e
		ON bb.end_station_id = bb_e.id
LIMIT 10)

SELECT *, calculate_distance(a.s_lat, a.s_long,
						 b.e_lat, b.e_long,
						 'K') AS dist				
FROM bb_2019 a,
	bb_2019 b
  
-- separate start_station from end_station
-- try calculating distance 
WITH
start_station (bike_id, start_time, end_time, start_station_id, user_type, user_birth_year, user_gender, s_lat, s_long) AS 
(SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.user_type, bb.user_birth_year, bb.user_gender,
		bb_s.latitude, bb_s.longtitude
FROM bluebikes_2019 AS bb
INNER JOIN bluebikes_stations AS bb_s
ON bb.start_station_id = bb_s.id
LIMIT 10),

end_station (end_station_id, e_lat, e_long) AS 
(SELECT 	bb1.end_station_id, 
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb1
INNER JOIN bluebikes_stations AS bb_e
ON bb1.end_station_id = bb_e.id
LIMIT 10)

SELECT a.bike_id, calculate_distance(a.s_lat, a.s_long,
						 b.e_lat, b.e_long,
						 'K')
FROM start_station a,
	end_station b
WHERE a.start_station_id != b.end_station_id

-- experimetns 2/2 for calc_dist
WITH 
bb_2019 (bike_id, start_time, end_time, start_station_id, end_station_id, user_type, user_birth_year, user_gender, s_lat, s_long, e_lat, e_long) AS 
(SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.end_station_id, bb.user_type, bb.user_birth_year, bb.user_gender, 
 		bb_s.latitude, bb_s.longtitude,
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb
INNER JOIN bluebikes_stations AS bb_s
		ON bb.start_station_id = bb_s.id
INNER JOIN bluebikes_stations AS bb_e
		ON bb.end_station_id = bb_e.id
LIMIT 10)

SELECT a.bike_id, a.start_time, a.end_time, 
		calculate_distance(a.s_lat, a.s_long,
						 b.e_lat, b.e_long,
						 'K') AS dist				
FROM bb_2019 a,
	bb_2019 b

WITH
start_station (bike_id, start_time, end_time, start_station_id, user_type, user_birth_year, user_gender, s_lat, s_long) AS 
(SELECT bb.bike_id, bb.start_time, bb.end_time, bb.start_station_id, bb.user_type, bb.user_birth_year, bb.user_gender,
		bb_s.latitude, bb_s.longtitude
FROM bluebikes_2019 AS bb
INNER JOIN bluebikes_stations AS bb_s
ON bb.start_station_id = bb_s.id
LIMIT 10),

end_station (end_station_id, e_lat, e_long) AS 
(SELECT 	bb1.end_station_id, 
		bb_e.latitude, bb_e.longtitude
FROM bluebikes_2019 AS bb1
INNER JOIN bluebikes_stations AS bb_e
ON bb1.end_station_id = bb_e.id
LIMIT 10)

SELECT a.bike_id, calculate_distance(a.s_lat, a.s_long,
						 b.e_lat, b.e_long,
						 'K')
FROM start_station AS a,
	end_station AS b
WHERE a.start_station_id != b.end_station_id



SELECT CALCULATE_DISTANCE(a.latitude, a.longtitude,
						 b.latitude, b.longtitude)
FROM bluebikes_stations a,
	bluebikes_stations b
INNER JOIN bluebikes_2019 AS bb1
ON bb1.start_station_id = a.id
INNER JOIN bluebikes_2019 AS bb2
ON bb2.end_station_id = b.id
WHERE a.id =  
LIMIT 10


SELECT *
FROM bluebikes_stations
LIMIT 10

-- end experiment

--experimenting with LAG
-- CTE
WITH 
bb2019 (bike_id, start_station_id, end_station_id, start_time) AS
(SELECT bike_id, start_station_id, end_station_id, start_time
FROM bluebikes_2019
ORDER BY bike_id, start_time
LIMIT 10000)

-- or do lag directly in select query (partition by bike_id, order by date to see if the end_station_id matches the next station_station_id for that bike_id)
SELECT 
	bike_id, start_station_id, end_station_id, start_time, LAG(end_station_id,1) OVER (PARTITION BY bike_id ORDER BY start_time) AS end_station_lag
FROM bluebikes_2019
LIMIT 100

WITH
lag_end
AS (SELECT 
	bike_id, start_station_id, end_station_id, start_time, LAG(end_station_id,1) OVER (PARTITION BY bike_id ORDER BY start_time) AS end_station_lag
FROM bluebikes_2019
)

SELECT bike_id, (COUNT(end_station_lag) - COUNT(DISTINCT bike_id)) AS bike_relocations
FROM lag_end
WHERE end_station_lag != start_station_id
GROUP BY bike_id
ORDER BY bike_relocations DESC

-- this give number of relocations - 1 (because first trip has no previous end_station_id) by bike_id ordered by desc number relocations

-- and for Divvy
WITH
lag_end
AS (SELECT 
	bikeid, start_station_id, end_station_id, start_time, LAG(end_station_id,1) OVER (PARTITION BY bikeid ORDER BY start_time) AS end_station_lag
FROM divvybikes_2019)

SELECT bikeid, COUNT(end_station_lag) AS bike_relocations
FROM lag_end
WHERE end_station_lag != start_station_id 
GROUP BY bikeid
ORDER BY bike_relocations DESC

-- try separating total relocation counts per month
WITH
lag_end
AS (SELECT 
	bikeid, start_station_id, end_station_id, start_time, LAG(end_station_id,1) OVER (PARTITION BY bikeid ORDER BY start_time) AS end_station_lag
FROM divvybikes_2019
   limit 100)

SELECT DATE_PART('month', start_time) AS month_sep, COUNT(end_station_lag) AS bike_relocations 
FROM lag_end
WHERE end_station_lag != start_station_id 
GROUP BY month_sep
ORDER BY month_sep

--Q6 try trip distance by gender (compare male and female for both companies)
WITH
start_station AS 
(SELECT bb.start_station_id, bb.user_gender,
		bb_s.latitude, bb_s.longtitude
	FROM bluebikes_2019 AS bb
	INNER JOIN bluebikes_stations AS bb_s
	ON bb.start_station_id = bb_s.id
),
end_station  AS 
(	SELECT 	bb1.end_station_id, 
	bb_e.latitude, bb_e.longtitude
	FROM bluebikes_2019 AS bb1
	INNER JOIN bluebikes_stations AS bb_e
	ON bb1.end_station_id = bb_e.id
	)
SELECT calculate_distance(a.latitude, a.longtitude,
						 b.latitude, b.longtitude,
						 'K') AS dist
FROM start_station a,
	end_station b
WHERE a.start_station_id != b.end_station_id AND a.user_gender = 2
LIMIT 10000
-- 1 is male
-- 2 is female
